<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Compute Jacobian of Implicit Function Constraints</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Compute Jacobian of Implicit Function Constraints">
<meta name="keywords" id="keywords" content=" compute jacobian implicit function constraints syntax prototype purpose l_y l_fun xy work example simple control problem ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_jac_constraint_htm.js'>
</script>
</head>
<body>
<table><tr>
<td><a href="solve_lower_cppad.htm" target="_top">Prev</a>
</td><td><a href="implicit_kedem.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>implicit_ad</option>
<option>utility</option>
<option>jac_constraint</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>implicit_ad-&gt;</option>
<option>run_cmake.sh</option>
<option>utility</option>
<option>implicit_kedem</option>
<option>implicit_newton</option>
<option>control</option>
<option>time</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>utility-&gt;</option>
<option>notation</option>
<option>norm_squared</option>
<option>join_vector</option>
<option>sparse_cppad2eigen</option>
<option>solve_lower_cppad</option>
<option>jac_constraint</option>
</select>
</td>
<td>jac_constraint</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Purpose</option>
<option>L_y</option>
<option>L_fun</option>
<option>xy</option>
<option>work</option>
<option>Example</option>
<option>---..Simple</option>
<option>---..Control Problem</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{{\bf #1}}
\newcommand{\R}[1]{{\rm #1}}@)@<center><b><big><big>Compute Jacobian of Implicit Function Constraints</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>jac_constraint(</span></font><i><font color="black"><span style='white-space: nowrap'>L_y</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>L_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xy</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Scalar</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> <b><font color="#000000">jac_constraint</font></b><font color="#990000">(</font>
     <b><font color="#000000">CPPAD_SPARSE</font></b><font color="#990000">(</font>Scalar<font color="#990000">)&amp;</font>                             L_y         <font color="#990000">,</font>
     CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font>Scalar<font color="#990000">&gt;&amp;</font>                             L_fun       <font color="#990000">,</font>
     <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font>Scalar<font color="#990000">)&amp;</font>                                   xy          <font color="#990000">,</font>
     CppAD<font color="#990000">::</font>sparse_jac_work<font color="#990000">&amp;</font>                           work        <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We are given a function <small>@(@
L : \B{R}^n \times \B{R}^m \rightarrow \B{R}^m
@)@</small>
and define the implicit function <small>@(@
Y : \B{R}^n \rightarrow \B{R}^m
@)@</small> by
the constraint equation
<small>@[@

	L[ x , Y(x) ] = 0

@]@</small>
This routine computes the sparse derivative of <small>@(@
L (x , y)
@)@</small>
w.r.t <small>@(@
y
@)@</small>.

<br>
<br>
<b><big><a name="L_y" id="L_y">L_y</a></big></b>
<br>
This argument must initially be created with the empty constructor; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_SPARSE(</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>L_y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It's return value is a sparse matrix representation of the Jacobian
of the constraints with respect to the implicit variables; i.e.,
the partial of <small>@(@
L(x, y)
@)@</small> w.r.t <small>@(@
y
@)@</small>.
The return value can be used to speed up subsequent calls when
the operation sequence in 
<code><i><font color="black"><span style='white-space: nowrap'>L_fun</span></font></i></code>
 does not change.
Note that this is an <small>@(@
m \times m
@)@</small> matrix; i.e.,
the column indices are relative to <small>@(@
y
@)@</small> and not for <small>@(@
(x, y)
@)@</small>.
The entries in 
<code><i><font color="black"><span style='white-space: nowrap'>L_y</span></font></i></code>
 are in row-major order.

<br>
<br>
<b><big><a name="L_fun" id="L_fun">L_fun</a></big></b>
<br>
The operation sequence for the <a href="constraint.htm" target="_top"><span style='white-space: nowrap'>constraint</span></a>
 function
<small>@(@
L : \B{R}^n \times \B{R}^m \rightarrow \B{R}^m
@)@</small>
is stored in 
<code><i><font color="black"><span style='white-space: nowrap'>L_fun</span></font></i></code>
.

<br>
<br>
<b><big><a name="xy" id="xy">xy</a></big></b>
<br>
This is the argument <small>@(@
(x, y)
@)@</small> at which we are evaluating the Jacobian.
It size is 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>+</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
.

<br>
<br>
<b><big><a name="work" id="work">work</a></big></b>
<br>
This is a work vector used to reduce the work.
If the operation sequence ion 
<code><i><font color="black"><span style='white-space: nowrap'>L_fun</span></font></i></code>
 changes,

<code><i><font color="black"><span style='white-space: nowrap'>L_y</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i></code>
 should be reset to empty.
Otherwise, they should remain unchanged from their previous return value.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>


<br>
<br>
<b><a name="Example.Simple" id="Example.Simple">Simple</a></b>

<pre><tt>
<font color="#009900">bool</font> <b><font color="#000000">test_jac_constraint</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

     <i><font color="#9A1900">// record z = L(x, y)</font></i>
     <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">axy</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">),</font> <b><font color="#000000">az</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
     axy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     axy<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font> axy <font color="#990000">);</font>
     az<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> axy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> axy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> axy<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> axy<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">-</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">L_fun</font></b><font color="#990000">(</font>axy<font color="#990000">,</font> az<font color="#990000">);</font>

     <i><font color="#9A1900">// choose a point that satisfies the constraints</font></i>
     <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">xy</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
     xy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     xy<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">sqrt</font></b><font color="#990000">(</font> <font color="#993399">1.0</font> <font color="#990000">-</font> xy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> xy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>

     <i><font color="#9A1900">// Evaluate L_y (x, y)</font></i>
     <b><font color="#000000">CPPAD_SPARSE</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> L_y<font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">sparse_jac_work</font> work<font color="#990000">;</font>
     <b><font color="#000000">jac_constraint</font></b><font color="#990000">(</font>L_y<font color="#990000">,</font> L_fun<font color="#990000">,</font> xy<font color="#990000">,</font> work<font color="#990000">);</font>

     <i><font color="#9A1900">// check the result is L_y(x, y) = 2.0 * y</font></i>
     ok <font color="#990000">&amp;=</font> L_y<font color="#990000">.</font><b><font color="#000000">nr</font></b><font color="#990000">()</font>  <font color="#990000">==</font> L_fun<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">();</font>
     ok <font color="#990000">&amp;=</font> L_y<font color="#990000">.</font><b><font color="#000000">nc</font></b><font color="#990000">()</font>  <font color="#990000">==</font> L_fun<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">();</font>
     ok <font color="#990000">&amp;=</font> L_y<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> L_y<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> L_y<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font> L_y<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">],</font> <font color="#993399">2.0</font> <font color="#990000">*</font> xy<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> eps99<font color="#990000">,</font> eps99 <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><a name="Example.Control Problem" id="Example.Control Problem">Control Problem</a></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">"control.hpp"</font>
<font color="#009900">bool</font> <b><font color="#000000">test_control_jac_constraint</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// record L_fun</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font>       L_fun<font color="#990000">;</font>
     <font color="#008080">size_t</font>                     J <font color="#990000">=</font> <font color="#993399">6</font><font color="#990000">;</font>
     <font color="#009900">double</font>                     delta_t <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
     <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">p</font></b><font color="#990000">(</font><font color="#993399">4</font><font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> <font color="#993399">4</font><font color="#990000">;</font> i<font color="#990000">++)</font>
          p<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font><font color="#993399">5</font> <font color="#990000">-</font> i<font color="#990000">);</font>
     control<font color="#990000">::</font><b><font color="#000000">rec_constraint</font></b><font color="#990000">(</font>L_fun<font color="#990000">,</font> J<font color="#990000">,</font> delta_t<font color="#990000">,</font> p<font color="#990000">);</font>
     <font color="#008080">size_t</font> m      <font color="#990000">=</font> L_fun<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">();</font>
     <font color="#008080">size_t</font> n      <font color="#990000">=</font> L_fun<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">-</font> m<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// compute L_y (x, y)</font></i>
     <b><font color="#000000">CPPAD_SPARSE</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> L_y<font color="#990000">;</font>
     <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">xy</font></b><font color="#990000">(</font>n <font color="#990000">+</font> m<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">+</font>m<font color="#990000">;</font> i<font color="#990000">++)</font>
          xy<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">sparse_jac_work</font> work<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// all vj are 0.5</font></i>
     <font color="#009900">double</font> vj  <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     <font color="#009900">double</font> r   <font color="#990000">=</font> <b><font color="#000000">sqrt</font></b><font color="#990000">(</font> <font color="#990000">(</font>vj <font color="#990000">+</font> <font color="#993399">1.0</font><font color="#990000">)*(</font>vj <font color="#990000">+</font> <font color="#993399">1.0</font><font color="#990000">)</font> <font color="#990000">+</font> vj <font color="#990000">*</font> vj <font color="#990000">);</font>
     <font color="#009900">double</font> r3  <font color="#990000">=</font> r <font color="#990000">*</font> r <font color="#990000">*</font> r<font color="#990000">;</font>
     <font color="#009900">double</font> r5  <font color="#990000">=</font> r <font color="#990000">*</font> r <font color="#990000">*</font> r <font color="#990000">*</font> r <font color="#990000">*</font> r<font color="#990000">;</font>
     <font color="#009900">double</font> a   <font color="#990000">=</font> <font color="#993399">1.0</font> <font color="#990000">/</font> r3 <font color="#990000">-</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <font color="#009900">double</font> ap0 <font color="#990000">=</font> <font color="#990000">-</font><font color="#993399">3.0</font> <font color="#990000">*</font> <font color="#990000">(</font>vj <font color="#990000">+</font> <font color="#993399">1.0</font><font color="#990000">)</font> <font color="#990000">/</font> r5<font color="#990000">;</font>
     <font color="#009900">double</font> ap1 <font color="#990000">=</font> <font color="#990000">-</font><font color="#993399">3.0</font> <font color="#990000">*</font> vj <font color="#990000">/</font> r5<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// check repeated calls to jac_constraint</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> count <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> count <font color="#990000">&lt;</font> <font color="#993399">2</font><font color="#990000">;</font> count <font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <b><font color="#000000">jac_constraint</font></b><font color="#990000">(</font>L_y<font color="#990000">,</font> L_fun<font color="#990000">,</font> xy<font color="#990000">,</font> work<font color="#990000">);</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// check Jacobian</font></i>
          <font color="#008080">size_t</font> nnz <font color="#990000">=</font> L_y<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">();</font>
          <b><font color="#0000FF">const</font></b> <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font>size_t<font color="#990000">)&amp;</font> <b><font color="#000000">row</font></b><font color="#990000">(</font> L_y<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#0000FF">const</font></b> <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font>size_t<font color="#990000">)&amp;</font> <b><font color="#000000">col</font></b><font color="#990000">(</font> L_y<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#0000FF">const</font></b> <b><font color="#000000">VECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)&amp;</font> <b><font color="#000000">val</font></b><font color="#990000">(</font> L_y<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()</font> <font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> k<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    <i><font color="#9A1900">//</font></i>
               <font color="#008080">size_t</font> i <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">];</font>
               <font color="#008080">size_t</font> j <font color="#990000">=</font> col<font color="#990000">[</font>k<font color="#990000">];</font>
               <font color="#009900">double</font> v <font color="#990000">=</font> val<font color="#990000">[</font>k<font color="#990000">];</font>
               <i><font color="#9A1900">//</font></i>
               <i><font color="#9A1900">// check lower triangular</font></i>
               ok <font color="#990000">&amp;=</font> j <font color="#990000">&lt;=</font> i<font color="#990000">;</font>
               <i><font color="#9A1900">//</font></i>
               <font color="#009900">bool</font> diagonal_block <font color="#990000">=</font> <font color="#990000">(</font>i <font color="#990000">/</font> <font color="#993399">4</font><font color="#990000">)</font> <font color="#990000">==</font> <font color="#990000">(</font>j <font color="#990000">/</font> <font color="#993399">4</font><font color="#990000">);</font>
               <b><font color="#0000FF">if</font></b><font color="#990000">(</font> diagonal_block <font color="#990000">)</font>
               <font color="#FF0000">{</font>    ok <font color="#990000">&amp;=</font> i <font color="#990000">==</font> j<font color="#990000">;</font>
                    ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#993399">1.0</font><font color="#990000">;</font>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">else</font></b>
               <font color="#FF0000">{</font>    <font color="#009900">double</font> check<font color="#990000">;</font>
                    <i><font color="#9A1900">// must be the lower diagonal block</font></i>
                    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>i <font color="#990000">/</font> <font color="#993399">4</font><font color="#990000">)</font> <font color="#990000">==</font> <font color="#990000">(</font>j <font color="#990000">/</font> <font color="#993399">4</font><font color="#990000">)</font> <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
                    <i><font color="#9A1900">//</font></i>
                    <i><font color="#9A1900">// derivative of this v w.r.t previous</font></i>
                    <font color="#008080">size_t</font> i_4 <font color="#990000">=</font> i <font color="#990000">%</font> <font color="#993399">4</font><font color="#990000">;</font>
                    <font color="#008080">size_t</font> j_4 <font color="#990000">=</font> j <font color="#990000">%</font> <font color="#993399">4</font><font color="#990000">;</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i_4 <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">)</font>
                    <font color="#FF0000">{</font>    <i><font color="#9A1900">// derivative of this v0 w.r.t previous v0 or v2</font></i>
                         ok <font color="#990000">&amp;=</font> j_4 <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">||</font> j_4 <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
                         <b><font color="#0000FF">if</font></b><font color="#990000">(</font> j_4 <font color="#990000">==</font> i_4 <font color="#990000">)</font>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#990000">-</font><font color="#993399">1.0</font><font color="#990000">;</font>
                         <b><font color="#0000FF">else</font></b>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#990000">-</font> <font color="#993399">1.0</font> <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                    <font color="#FF0000">}</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i_4 <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">)</font>
                    <font color="#FF0000">{</font>    <i><font color="#9A1900">// derivative of this v1 w.r.t previous v1 or v3</font></i>
                         ok <font color="#990000">&amp;=</font> j_4 <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">||</font> j_4 <font color="#990000">==</font> <font color="#993399">3</font><font color="#990000">;</font>
                         <b><font color="#0000FF">if</font></b><font color="#990000">(</font> j_4 <font color="#990000">==</font> i_4 <font color="#990000">)</font>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#990000">-</font><font color="#993399">1.0</font><font color="#990000">;</font>
                         <b><font color="#0000FF">else</font></b>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#990000">-</font> <font color="#993399">1.0</font> <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                    <font color="#FF0000">}</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i_4 <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">)</font>
                    <font color="#FF0000">{</font>    <i><font color="#9A1900">// derivative of this v2</font></i>
                         <b><font color="#0000FF">switch</font></b><font color="#990000">(</font> j_4 <font color="#990000">)</font>
                         <font color="#FF0000">{</font>
                              <b><font color="#0000FF">case</font></b> <font color="#993399">0</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v0</font></i>
                              check <font color="#990000">=</font> <font color="#990000">(</font>a <font color="#990000">+</font> <font color="#990000">(</font><font color="#993399">1.0</font> <font color="#990000">+</font> vj<font color="#990000">)</font> <font color="#990000">*</font> ap0<font color="#990000">)</font> <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                              ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">,</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                              <b><font color="#0000FF">case</font></b> <font color="#993399">1</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v1</font></i>
                              check <font color="#990000">=</font> <font color="#990000">(</font><font color="#993399">1.0</font> <font color="#990000">+</font> vj<font color="#990000">)</font> <font color="#990000">*</font> ap1 <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                              ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">,</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                              <b><font color="#0000FF">case</font></b> <font color="#993399">2</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v2</font></i>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#990000">-</font><font color="#993399">1.0</font><font color="#990000">;</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                              <b><font color="#0000FF">case</font></b> <font color="#993399">3</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v3</font></i>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#990000">-</font> <font color="#993399">2.0</font> <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

<b><font color="#008080">                              default:</font></b>
                              ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
                         <font color="#FF0000">}</font>
                    <font color="#FF0000">}</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i_4 <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">)</font>
                    <font color="#FF0000">{</font>    <i><font color="#9A1900">// derivative of this v3</font></i>
                         <b><font color="#0000FF">switch</font></b><font color="#990000">(</font> j_4 <font color="#990000">)</font>
                         <font color="#FF0000">{</font>
                              <b><font color="#0000FF">case</font></b> <font color="#993399">0</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v0</font></i>
                              check <font color="#990000">=</font> vj <font color="#990000">*</font> ap0 <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                              ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">,</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                              <b><font color="#0000FF">case</font></b> <font color="#993399">1</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v1</font></i>
                              check <font color="#990000">=</font> <font color="#990000">(</font>a <font color="#990000">+</font> vj <font color="#990000">*</font> ap1<font color="#990000">)</font> <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                              ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">,</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                              <b><font color="#0000FF">case</font></b> <font color="#993399">2</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v2</font></i>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#993399">2.0</font> <font color="#990000">*</font> delta_t<font color="#990000">;</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

                              <b><font color="#0000FF">case</font></b> <font color="#993399">3</font><font color="#990000">:</font>
                              <i><font color="#9A1900">// w.r.t previous v3</font></i>
                              ok <font color="#990000">&amp;=</font> v <font color="#990000">==</font> <font color="#990000">-</font><font color="#993399">1.0</font><font color="#990000">;</font>
                              <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

<b><font color="#008080">                              default:</font></b>
                              ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
                         <font color="#FF0000">}</font>
                    <font color="#FF0000">}</font>
               <font color="#FF0000">}</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: src/utility.hpp

</body>
</html>
